# bash completion for rebar3

_rebar3()
{
    local cur prev sopts lopts cmdsnvars profiles rebarconf="rebar.config"
    COMPREPLY=()
    curindex="${COMP_CWORD}"
    cur="${COMP_WORDS[curindex]}"
    prev="${COMP_WORDS[curindex-1]}"
    first="${COMP_WORDS[1]}"

    get_config_regex()
    {
        eval "$1=\"(?:{\s*$2\s*,\s*(\r\n)*\n*\r*\[).*?(?:\s*(\r\n)*\n*\r*}\s*(\r\n)*\n*\r*\.)\""
    }

    get_config()
    {
        local regex
        get_config_regex regex "$3"
        eval "$1=\"$( cat $2 \
                  | grep -oPz "(?s)${regex}" \
                  | tr -d '\0' \
                  | tr -d '\n' )\""
    }

    get_profiles()
    {
        if [ -n "${profiles}" ]; then
            return
        fi

        local profconfig depth profile naming ch

        if [ -f "$rebarconf" ]; then
            get_config profconfig "${rebarconf}" "profiles"
        fi

        if [ -n "$profconfig" ]; then
            depth=0;
            while read -n1 ch; do
                if [[ $depth == 0 && $ch == "{" ]]; then
                    naming=true
                elif [[ $naming && ($ch == "," || $ch == " ") ]]; then
                    profiles+=" $profile"
                    unset profile
                    unset naming
                elif [[ $naming ]]; then
                    profile+="$ch"
                elif [[ $ch == "]" ]]; then
                    ((depth++))
                elif [[ $ch == "[" ]]; then
                    ((depth--))
                fi
            done < <( echo -n "$profconfig" \
                      | grep -oPz '(?s)(?<=\[).*(?=\])' \
                      | tr -d '\0' \
                      | sed -e 's/^[[:space:]]*//' )
        else
            profiles="default"
        fi
    }

    if [[ ${prev} == rebar3 ]] ; then
        sopts="-h -v"
        lopts="--help --version"
        cmdsnvars=" \
            as \
            clean \
            compile \
            cover \
            ct \
            deps \
            dialyzer \
            do \
            edoc \
            escriptize \
            eunit \
            experimental \
            help \
            hex \
            local \
            new \
            path \
            pkgs \
            plugins \
            release \
            relup \
            report \
            shell \
            tar \
            tree \
            unlock \
            unstable \
            update \
            upgrade \
            version \
            xref \
            "
    elif [[ ${prev} == as ]] ; then
        get_profiles
        cmdsnvars="$profiles"
    elif [[ ${prev} == clean ]] ; then
        sopts="-a -p"
        lopts="--all --profile"
    elif [[ ${prev} == compile ]] ; then
        :
    elif [[ ${prev} == cover ]] ; then
        sopts="-r -v"
        lopts="--reset --verbose"
    elif [[ ${prev} == ct ]] ; then
        sopts="-c -v"
        lopts=" \
            --dir \
            --suite \
            --group \
            --case \
            --config \
            --allow_user_terms \
            --logdir \
            --logopts \
            --verbosity \
            --silent_connections \
            --stylesheet \
            --cover \
            --repeat \
            --duration \
            --until \
            --force_stop \
            --basic_html \
            --stylesheet \
            --decrypt_key \
            --decrypt_file \
            --abort_if_missing_suites \
            --multiply_timetraps \
            --scale_timetraps \
            --create_priv_dir \
            --include \
            --verbose \
            --auto_compile \
            "
    elif [[ ${prev} == deps ]] ; then
        :
    elif [[ ${prev} == dialyzer ]] ; then
        sopts="-u -s"
        lopts="--update-plt --succ-typings"
    elif [[ ${prev} == do ]] ; then
        :
    elif [[ ${prev} == edoc ]] ; then
        :
    elif [[ ${prev} == escriptize ]] ; then
        :
    elif [[ ${prev} == eunit ]] ; then
        sopts="-c -e -v -d -f -m -s -g"
        lopts="--app --application --cover --dir --error_on_warning --file --module --suite --generator --verbose"
    elif [[ ${prev} == experimental ]] ; then
        cmdsnvars=" \
            vendor \
            "
    elif [[ ${prev} == help ]] ; then
        :
    elif [[ ${prev} == hex ]] ; then
        cmdsnvars=" \
            build \
            cut \
            organization \
            owner \
            publish \
            retire \
            search \
            user \
            "
    elif [[ ${prev} == local ]] ; then
        cmdsnvars=" \
            install \
            upgrade \
            "
    elif [[ ${prev} == new ]] ; then
        sopts="-f"
        lopts="--force"
    elif [[ ${prev} == path ]] ; then
        sopts="-s"
        lopts=" \
            --app \
            --base \
            --bin \
            --ebin \
            --lib \
            --priv \
            --separator \
            --src \
            --rel \
            "
    elif [[ ${prev} == pkgs ]] ; then
        :
    elif [[ ${prev} == plugins ]] ; then
        cmdsnvars=" \
            list \
            upgrade \
            "
    elif [[ ${prev} == release ]] ; then
        sopts="-n -v -g -u -o -h -l -p -V -d -i -a -c -r"
        lopts=" \
            --relname \
            --relvsn \
            --goal \
            --upfrom \
            --output-dir \
            --help \
            --lib-dir \
            --path \
            --default-libs \
            --verbose \
            --dev-mode \
            --include-erts \
            --override \
            --config \
            --overlay_vars \
            --vm_args \
            --sys_config \
            --system_libs \
            --version \
            --root \
            "
    elif [[ ${prev} == relup ]] ; then
        sopts="-n -v -g -u -o -h -l -p -V -d -i -a -c -r"
        lopts=" \
            --relname \
            --relvsn \
            --goal \
            --upfrom \
            --output-dir \
            --help \
            --lib-dir \
            --path \
            --default-libs \
            --verbose \
            --dev-mode \
            --include-erts \
            --override \
            --config \
            --overlay_vars \
            --vm_args \
            --sys_config \
            --system_libs \
            --version \
            --root \
            "
    elif [[ ${prev} == report ]] ; then
        :
    elif [[ ${prev} == shell ]] ; then
        :
    elif [[ ${prev} == tar ]] ; then
        sopts="-n -v -g -u -o -h -l -p -V -d -i -a -c -r"
        lopts=" \
            --relname \
            --relvsn \
            --goal \
            --upfrom \
            --output-dir \
            --help \
            --lib-dir \
            --path \
            --default-libs \
            --verbose \
            --dev-mode \
            --include-erts \
            --override \
            --config \
            --overlay_vars \
            --vm_args \
            --sys_config \
            --system_libs \
            --version \
            --root \
            "
    elif [[ ${prev} == tree ]] ; then
        sopts="-v"
        lopts="--verbose"
    elif [[ ${prev} == unstable ]] ; then
        :
    elif [[ ${prev} == update ]] ; then
        :
    elif [[ ${prev} == upgrade ]] ; then
        :
    elif [[ ${prev} == version ]] ; then
        :
    elif [[ ${prev} == xref ]] ; then
        :
    elif [[ ${first} == as && ${curindex} == 3 ]] ; then
        cmdsnvars=" \
            clean \
            compile \
            cover \
            ct \
            deps \
            dialyzer \
            do \
            edoc \
            escriptize \
            eunit \
            experimental \
            help \
            hex \
            local \
            new \
            path \
            pkgs \
            plugins \
            release \
            relup \
            report \
            shell \
            tar \
            tree \
            unlock \
            unstable \
            update \
            upgrade \
            version \
            xref \
            "
    elif [[ ${first} == clean && (${prev} == "--profile" ||
                                  ${prev} == "-p") ]] ; then
        get_profiles
        cmdsnvars="${profiles}"
    fi

    COMPREPLY=( $(compgen -W "${sopts} ${lopts} ${cmdsnvars}" -- ${cur}) )

    if [ -n "$COMPREPLY" ] ; then
        # append space if matched
        COMPREPLY="${COMPREPLY} "
        # remove trailing space after equal sign
        COMPREPLY=${COMPREPLY/%= /=}
    fi
    return 0
}
complete -o nospace -F _rebar3 rebar3

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
